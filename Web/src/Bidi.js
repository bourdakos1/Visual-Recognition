import React from 'react'

let NONE = -1;
let EUROPIAN = 0;
let INDIC = 1;
let CONTEXTUAL = 2;
let NATIONAL = 3;
let arrTypes = {};
arrTypes["EUROPIAN"] = EUROPIAN;
arrTypes["INDIC"] = INDIC;
arrTypes["CONTEXTUAL"] = CONTEXTUAL;
arrTypes["NATIONAL"] = NATIONAL;
let arrNames = ["EUROPIAN","INDIC","CONTEXTUAL","NATIONAL"];
let LRE = "\u202A";
let RLE = "\u202B";
let PDF = "\u202C";
let LRM = "\u200E";
let RLM = "\u200F";
let segmentDir;
let re = /([0-9])|([\u0660-\u0669])|([\u0590-\u05FF\u0608\u060B\u060D\u061B-\u064A\u066D-\u066F\u0671-\u06D5\u06E5-\u06E6\u06EE-\u06EF\u06FA-\u06FF\u0750-\u077F\u08A0-\u08E3\u200F\u202B\u202E\u2067\uFB50-\uFD3D\uFD40-\uFDCF\uFDF0-\uFDFC\uFDFE-\uFDFF\uFE70-\uFEFE]+)|([^0-9\u0590-\u05FF\u0660-\u0669\u0608\u060B\u060D\u061B-\u064A\u066D-\u066F\u0671-\u06D5\u06E5-\u06E6\u06EE-\u06EF\u06FA-\u06FF\u0750-\u077F\u08A0-\u08E3\u200F\u202B\u202E\u2067\uFB50-\uFD3D\uFD40-\uFDCF\uFDF0-\uFDFC\uFDFE-\uFDFF\uFE70-\uFEFE\u0600-\u0607\u0609-\u060A\u060C\u060E-\u061A\u064B-\u066C\u0670\u06D6-\u06E4\u06E7-\u06ED\u06F0-\u06F9\u08E4-\u08FF\uFD3E-\uFD3F\uFDD0-\uFDEF\uFDFD\uFEFF\u0000-\u0040\u005B-\u0060\u007B-\u007F\u0080-\u00A9\u00AB-\u00B4\u00B6-\u00B9\u00BB-\u00BF\u00D7\u00F7\u02B9-\u02BA\u02C2-\u02CF\u02D2-\u02DF\u02E5-\u02ED\u02EF-\u02FF\u2070\u2074-\u207E\u2080-\u208E\u2100-\u2101\u2103-\u2106\u2108-\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A-\u213B\u2140-\u2144\u214A-\u214D\u2150-\u215F\u2189\uA720-\uA721\uA788\uFF01-\uFF20\uFF3B-\uFF40\uFF5B-\uFF65\uFFE0-\uFFE6\uFFE8-\uFFEE]+)/g;
let cldrStr = '{"General Info": {"Generated from": "CLDR Version: 30.0.3","Generated by": "BDL CLDR Reader Tool","Date": "16-03-17 12:40:12"},' +
'"Arabic Default Numbering Systems": {"ar": "arab","ar_AE": "arab","ar_BH": "arab","ar_DJ": "arab","ar_DZ": "latn","ar_EG": "arab","ar_EH": "latn",' +
'"ar_ER": "arab","ar_IL": "arab","ar_IQ": "arab","ar_JO": "arab","ar_KM": "arab","ar_KW": "arab","ar_LB": "arab","ar_LY": "latn","ar_MA": "latn",' +
'"ar_MR": "arab","ar_OM": "arab","ar_PS": "arab","ar_QA": "arab","ar_SA": "arab","ar_SD": "arab","ar_SO": "arab","ar_SS": "arab","ar_SY": "arab","ar_TD": "arab","ar_TN": "latn","ar_YE": "arab"}}';
let cldrData = JSON.parse(cldrStr)["Arabic Default Numbering Systems"];

let isBidiLocale = function (locale, arabicOnly) {
	var def = locale.indexOf("-") === 2;
	var und = locale.indexOf("_") === 2;
	var lang = !locale ? "" : def? locale.split("-")[0] : und? locale.split("_")[0] : locale;
	if (!lang || (arabicOnly && lang !== "ar") || (lang !== "ar" && lang !== "he")) {
		return false;
	}
	return true;
};
let useLatinNums = function (locale) {
	if (!isBidiLocale(locale, true))
		return true;
	return (cldrData && cldrData[locale] && cldrData[locale] === "latn");
};
let validateNSType = function(stype, locale) {
	var type;
	if (typeof stype === 'string')
		type = arrTypes[stype.toUpperCase()] !== undefined? arrTypes[stype.toUpperCase()] : NONE;
	else if(typeof stype === 'number') {
		stype = Math.floor(stype);
		type = stype >= EUROPIAN && stype <= NATIONAL? stype : NONE;
	}
	else
		type = NONE;
	if (type > EUROPIAN && !isBidiLocale(locale, true))
		type = EUROPIAN;
	return type;
}

export default class Bidi {
	constructor({enabled = false, guiDir, locale, numShapingType = "", textDir} = {}) {
		this.enabled = enabled;
		this.locale = typeof navigator === "undefined" ? "" : navigator.languages ? navigator.languages[0] : (navigator.language || navigator.userLanguage || "");
		let defDir =  isBidiLocale(this.locale)? "rtl" : "ltr";
		this.guiDir = guiDir || defDir;
		this.textDir = textDir || defDir;
		this.numShapingType = numShapingType;
		this.NONE = NONE;
		this.EUROPIAN = EUROPIAN;
		this.INDIC = INDIC;
		this.CONTEXTUAL = CONTEXTUAL;
		this.NATIONAL = NATIONAL;
		this.LTR = "ltr";
		this.RTL = "rtl";
		this.AUTO = "auto";
		this.FILE_NAME = "fileName";
	}
	
	convert(text, {useUCC = false, numShapingType, sttType = "", textDir, formElement = false, isolate = false} = {}) {
		if (!text)
			return text;
		return this.convertString(text, numShapingType || this.numShapingType, sttType, textDir || this.textDir, useUCC, formElement, isolate);
	}
	
	convertString(text, numShapingType, sttType, textDir, useUCC, formElement, isolate) {		
		if (!this.enabled)
			return text;
		let btd = sttType? "ltr" : this.getDirection(text, textDir, this.guiDir);  //TODO: Get actual flowDir for specific STT
		if (numShapingType) {
			text = this.reshapeString(text, numShapingType, this.locale, btd, this.guiDir);
		}
		if (!sttType || sttType !== this.FILE_NAME) {               //TODO: Add actual logic for STT
			if (!formElement && btd !== this.guiDir) {
				if (useUCC && text)
					text = (btd === "rtl"? RLE : LRE) + text + PDF;
				else if (text) 
					text = <bdi dir={btd}>{text}</bdi>;
			}
		}
		else if(sttType === this.FILE_NAME) {
			let ind = text.lastIndexOf(".");
			let name = ind <= 0 || ind == text.length-1? text : text.substring(0, ind);
			let ext = ind <= 0 || ind == text.length-1? null : text.substr(ind+1);
			let dt = ext? LRM + "." + LRM : "";
			let fix = isolate? this.guiDir === "rtl"? RLM : LRM : "";
			text = fix + LRE + name + dt + ext + PDF + fix;
		}
		return text;
	}
	
	reshapeString(text, stype, locale, dir, guiDir) {
		let type = validateNSType(stype, locale);
		if (type === NONE)
			return text;
		segmentDir = dir = this.getDirection(text, dir, guiDir);
		return text.replace(re, function(curChs, latNum, araNum, rtlChs, ltrChs) {
			if (araNum) {
				if (type === EUROPIAN || (type === CONTEXTUAL && segmentDir === "ltr") || (type === NATIONAL && useLatinNums(locale)))
					return araNum.charCodeAt(0) - 1632;
				else
					return araNum;
			}
			else if(latNum) {
				if (type === INDIC || (type === CONTEXTUAL && segmentDir === "rtl") || (type === NATIONAL && !useLatinNums(locale)))
					return String.fromCharCode(parseInt(latNum) + 1632);
				else
					return latNum;					
			}
			else if(rtlChs) {
				segmentDir = "rtl";
			}
			else if(ltrChs){
				segmentDir = "ltr";
			}
			return curChs;
		});
	}

	getDirection(text, dir, guiDir) {
		if (dir)
			dir = dir.toLowerCase();
		else
			dir = this.textDir.toLowerCase();
		if (guiDir)
			guiDir = guiDir.toLowerCase();
		else
			guiDir = this.guiDir.toLowerCase();
		if (dir !== "auto" && (/^(rtl|ltr)$/i).test(dir)) {
			return dir;
		}
		guiDir = (/^(rtl|ltr)$/i).test(guiDir) ? guiDir : "ltr";
		var fdc = /[A-Za-z\u05d0-\u065f\u066a-\u06ef\u06fa-\u07ff\ufb1d-\ufdff\ufe70-\ufefc]/.exec(text);
		return fdc ? (fdc[0] <= "z" ? "ltr" : "rtl") : guiDir;
	}

	getLang(stype, locale) {
		if (!stype)
			stype = this.numShapingType;
		if (!locale)
			locale = this.locale;
		let type = validateNSType(stype, locale);
		if (type === NONE || type === EUROPIAN || !isBidiLocale(locale, true) || (type === NATIONAL && useLatinNums(locale)))
			return "";
		else
			return "ar";
	}
}